<h1>{{title}}</h1>
<h2>Plant List</h2>
<table>
  <thead>
    <tr>
      <th data-sort-id="id">ID</th>
      <th>Image</th>
      <th>Name</th>
      <th>Price</th>
      <th>Family</th>
      <th>Genus</th>
      <th>Categories</th>
      <th>Edit</th>
      <th>Delete</th>
    </tr>
  </thead>
  <tbody>
    {{#each data}}
    <tr>
      <td>{{ id }}</td>
      <td><img src="{{ ../image_base_url }}{{format_relative_image_path image.url }}" alt="{{image.alt}}" /></td>
      <td>{{name}} <em>({{scientific_name}})</em></td>
      <td>{{ price }}</td>
      <td>{{ family }}</td>
      <td>{{ genus }}</td>
      <td>
        {{#each categories }}
        {{#if @last}}{{this}}{{else}}{{this}}, {{/if}}
        {{/each}}
      </td>
      <td><a href="/modify/{{id}}">Edit</a></td>
      <td><a href="/api/delete/{{id}}" class="delete">Delete</a></td>
    </tr>
    {{/each}}
  </tbody>
</table>
<script src="js/qs.js"></script>
<script>
  const tableHeaders = document.querySelectorAll('table th')
  const tableBtns = document.querySelectorAll('table a')
  const params = Qs.parse(window.location.search.substring(1)) // => { sort: [{ id: "id", sortDirection: "ASC" }] }

  Array.from(tableHeaders).forEach(th => {
    const id = th.dataset.sortId
    // if current table header sort id exists in params
    const sortIndex = id && params.sort && params.sort.findIndex(p => p.id === id)
    const direction = sortIndex !== undefined && params.sort[sortIndex].sortDirection
    th.dataset.sortDirection = direction

    th.addEventListener('click', (e) => {
      let localParams = { ...params }
      // adjust table header data.sortdirection based on current url params
      if (sortIndex !== undefined) {
        console.log(localParams.sort[sortIndex])
        localParams.sort[sortIndex] = { id, sortDirection: direction === "ASCENDING" ? "DESCENDING" : "ASCENDING" }
      } else {
        const sort = localParams.sort || []
        localParams = { sort: [...sort, { id, sortDirection: direction || "DESCENDING" }] }
      }

      const stringParams = Qs.stringify(localParams)
      window.location = "/?" + stringParams
    })
  })

  Array.from(tableBtns).forEach(btn => {
    btn.addEventListener('click', (e) => {
      const classList = Array.from(e.target.classList)

      if (classList.includes('delete')) {
        e.preventDefault()
        const url = e.target.href
        fetch(url, {
          method: "DELETE"
        })
          .then(res => res.json())
          .then(json => {
            console.log(json)
            location.reload()
          })
          .catch(err => console.log("ERROR:", err))
      }

    })
  })
</script>